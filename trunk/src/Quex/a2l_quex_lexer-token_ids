/* -*- C++ -*- vim: set syntax=cpp:
 * PURPOSE: File containing definition of token-identifier and
 *          a function that maps token identifiers to a string
 *          name.
 *
 * NOTE: This file has been created automatically by Quex.
 *       Visit quex.org for further info.
 *
 * DATE: Wed Sep 21 17:42:51 2011
 *
 * (C) 2005-2010 Frank-Rene Schaefer
 * ABSOLUTELY NO WARRANTY                                           */
#ifndef __QUEX_INCLUDE_GUARD__AUTO_TOKEN_IDS___QUEX____TOKEN__
#define __QUEX_INCLUDE_GUARD__AUTO_TOKEN_IDS___QUEX____TOKEN__

#ifndef __QUEX_OPTION_PLAIN_C
#   include<cstdio> 
#else
#   include<stdio.h> 
#endif

/* The token class definition file can only be included after the two token identifiers have
 * been defined. Otherwise, it would rely on default values. */
#include "a2l_quex_lexer-token"

const QUEX_TYPE_TOKEN_ID QUEX_TKN_ADDRTYPE       = ((QUEX_TYPE_TOKEN_ID)10000);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_ATTRIBUTE      = ((QUEX_TYPE_TOKEN_ID)10001);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_BLOCKBEGIN     = ((QUEX_TYPE_TOKEN_ID)10002);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_BLOCKEND       = ((QUEX_TYPE_TOKEN_ID)10003);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_BYTEORDER      = ((QUEX_TYPE_TOKEN_ID)10004);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_COMMENT        = ((QUEX_TYPE_TOKEN_ID)10005);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_CONVERSIONTYPE = ((QUEX_TYPE_TOKEN_ID)10006);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_DATASIZE       = ((QUEX_TYPE_TOKEN_ID)10007);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_DATATYPE       = ((QUEX_TYPE_TOKEN_ID)10008);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_DEDENT         = ((QUEX_TYPE_TOKEN_ID)3);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_FLOAT          = ((QUEX_TYPE_TOKEN_ID)10009);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_HEX            = ((QUEX_TYPE_TOKEN_ID)10010);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_IDENTIFIER     = ((QUEX_TYPE_TOKEN_ID)10011);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_INDENT         = ((QUEX_TYPE_TOKEN_ID)2);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_INDEXMODE      = ((QUEX_TYPE_TOKEN_ID)10012);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_INDEXORDER     = ((QUEX_TYPE_TOKEN_ID)10013);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_INTEGER        = ((QUEX_TYPE_TOKEN_ID)10014);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_KEYWORD        = ((QUEX_TYPE_TOKEN_ID)10015);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_MEMATTRIBUTE   = ((QUEX_TYPE_TOKEN_ID)10016);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_MEMORYTYPE     = ((QUEX_TYPE_TOKEN_ID)10017);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_MODE           = ((QUEX_TYPE_TOKEN_ID)10018);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_NODENT         = ((QUEX_TYPE_TOKEN_ID)4);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_PRGTYPE        = ((QUEX_TYPE_TOKEN_ID)10019);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_STRING         = ((QUEX_TYPE_TOKEN_ID)10020);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_STRINGFORMAT   = ((QUEX_TYPE_TOKEN_ID)10021);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_TERMINATION    = ((QUEX_TYPE_TOKEN_ID)0);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_TYPE           = ((QUEX_TYPE_TOKEN_ID)10022);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_UNINITIALIZED  = ((QUEX_TYPE_TOKEN_ID)1);


QUEX_NAMESPACE_TOKEN_OPEN
extern const char* QUEX_NAME_TOKEN(map_id_to_name)(const QUEX_TYPE_TOKEN_ID TokenID);
QUEX_NAMESPACE_TOKEN_CLOSE

#endif /* __QUEX_INCLUDE_GUARD__AUTO_TOKEN_IDS___QUEX____TOKEN__ */
