//      -*- C++ -*-
//     cd D:\C++\Projects\HEXplorer_repo\LIBS\Quex
//     quex -i a2l_quex_lexer.qx -o a2l_quex_lexer > toto.txt

header
{
#include <cstdlib>  // for: atoi()
}

define 
{
   D_WHITESPACE    		[ \t\r\n]+
   D_SUB_IDENTIFIER    	[_a-zA-Z][_a-zA-Z0-9]*
   D_UINTEGER			[0-9]+
   D_HEX 				0x[0-9A-Fa-f]+	
   D_FLOAT 			[\+\-]?{D_UINTEGER}\.{D_UINTEGER}?
   D_BLOCK_BEGIN 		\/begin
   D_BLOCK_END 			\/end
   D_STRING			"\""(\\"\""|[^"]|"\"""\"")*"\""
   D_COMMENT			(\/\*([^*]|[\r\n]|(\*+([^*\/]|[\r\n])))*\*+\/)|(\/\/.*)

}

token 
{
   IDENTIFIER;
   INTEGER;
   FLOAT;
   HEX;
   STRING;
   STRINGFORMAT;
   COMMENT;
   BLOCKBEGIN;
   BLOCKEND;
   KEYWORD;
   TYPE;
   DATATYPE;
   DATASIZE;
   ADDRTYPE;
   BYTEORDER;
   INDEXMODE;
   INDEXORDER;
   CONVERSIONTYPE;
   ATTRIBUTE;
   MODE;
   PRGTYPE;
   MEMORYTYPE;
   MEMATTRIBUTE;   
}

mode ONE_AND_ONLY :
<skip:       [ \r\n\t]>
<skip_range: "/begin A2ML" "/end A2ML">
{
	// KEYWORDS
    
	A_INT64 => QUEX_TKN_DATATYPE;
	A_UINT64 => QUEX_TKN_DATATYPE;
	A2ML => QUEX_TKN_KEYWORD;
	A2ML_VERSION => QUEX_TKN_KEYWORD;
	ABSOLUTE => QUEX_TKN_MODE;
	ADDR_EPK => QUEX_TKN_KEYWORD;
	ALIGNMENT_BYTE => QUEX_TKN_KEYWORD;
	ALIGNMENT_FLOAT32_IEEE => QUEX_TKN_KEYWORD;
	ALIGNMENT_LONG => QUEX_TKN_KEYWORD;
	ALIGNMENT_WORD => QUEX_TKN_KEYWORD;
	ALTERNATE_CURVES => QUEX_TKN_INDEXMODE;
	ALTERNATE_WITH_X => QUEX_TKN_INDEXMODE;
	ALTERNATE_WITH_Y => QUEX_TKN_INDEXMODE;
	ANNOTATION => QUEX_TKN_KEYWORD;
	ANNOTATION_LABEL => QUEX_TKN_KEYWORD;
	ANNOTATION_ORIGIN => QUEX_TKN_KEYWORD;
	ANNOTATION_TEXT =>QUEX_TKN_KEYWORD;
	ARRAY_SIZE => QUEX_TKN_KEYWORD;
	ASAP2_VERSION => QUEX_TKN_KEYWORD;
	ASCII => QUEX_TKN_TYPE;
	AXIS_DESCR => QUEX_TKN_KEYWORD;
	AXIS_PTS => QUEX_TKN_KEYWORD;
	AXIS_PTS_REF => QUEX_TKN_KEYWORD;
	AXIS_PTS_X => QUEX_TKN_KEYWORD;
	AXIS_PTS_Y => QUEX_TKN_KEYWORD;
	BIG_ENDIAN => QUEX_TKN_BYTEORDER;
	BIT_MASK => QUEX_TKN_KEYWORD;
	BYTE => QUEX_TKN_DATASIZE;
	BYTE_ORDER => QUEX_TKN_KEYWORD;
	CALIBRATION_HANDLE => QUEX_TKN_KEYWORD;
	CALIBRATION_HANDLE_TEXT => QUEX_TKN_KEYWORD;
	CALIBRATION_METHOD => QUEX_TKN_KEYWORD;
	CALIBRATION_VARIABLES => QUEX_TKN_PRGTYPE;
	CHARACTERISTIC => QUEX_TKN_KEYWORD;
	CODE => QUEX_TKN_PRGTYPE;
	COEFFS => QUEX_TKN_KEYWORD;
	COEFFS_LINEAR => QUEX_TKN_KEYWORD;
	COLUMN_DIR => QUEX_TKN_INDEXMODE;
	COM_AXIS => QUEX_TKN_ATTRIBUTE;
	COMPU_METHOD => QUEX_TKN_KEYWORD;
	COMPU_TAB => QUEX_TKN_KEYWORD;
	COMPU_TAB_REF => QUEX_TKN_KEYWORD;
	COMPU_VTAB => QUEX_TKN_KEYWORD;
	CPU_TYPE => QUEX_TKN_KEYWORD;
	CUBE_4 => QUEX_TKN_TYPE;
	CUBE_5 => QUEX_TKN_TYPE;
	CUBOID => QUEX_TKN_TYPE;
	CURVE => QUEX_TKN_TYPE;
	CURVE_AXIS => QUEX_TKN_ATTRIBUTE;
	CUSTOMER_NO => QUEX_TKN_KEYWORD;
	DATA => QUEX_TKN_PRGTYPE;
	DEF_CHARACTERISTIC => QUEX_TKN_KEYWORD;
	DEFAULT_VALUE => QUEX_TKN_KEYWORD;
	DEPOSIT => QUEX_TKN_KEYWORD;
	DIRECT => QUEX_TKN_ADDRTYPE;
	ECU => QUEX_TKN_KEYWORD;
	ECU_ADDRESS => QUEX_TKN_KEYWORD;
	EEPROM => QUEX_TKN_MEMORYTYPE;
	EPK => QUEX_TKN_KEYWORD;
	EPROM => QUEX_TKN_MEMORYTYPE;
	EXCLUDE_FROM_FLASH => QUEX_TKN_PRGTYPE;
	EXTENDED_LIMITS => QUEX_TKN_KEYWORD;
	EXTERN => QUEX_TKN_MEMATTRIBUTE;
	FIX_AXIS => QUEX_TKN_ATTRIBUTE;
	FIX_AXIS_PAR => QUEX_TKN_KEYWORD;
	FLASH => QUEX_TKN_MEMORYTYPE;
	FLOAT32_IEEE => QUEX_TKN_DATATYPE;
	FLOAT64_IEEE => QUEX_TKN_DATATYPE;
	FNC_VALUES => QUEX_TKN_KEYWORD;
	FORM => QUEX_TKN_CONVERSIONTYPE;
	FORMAT => QUEX_TKN_KEYWORD;
	FORMULA => QUEX_TKN_KEYWORD;
	FORMULA_INV => QUEX_TKN_KEYWORD;
	FUNCTION => QUEX_TKN_KEYWORD;
	FUNCTION_VERSION => QUEX_TKN_KEYWORD;
	GROUP => QUEX_TKN_KEYWORD;
	HEADER => QUEX_TKN_KEYWORD;
	IDENTICAL => QUEX_TKN_CONVERSIONTYPE;
	IF_DATA => QUEX_TKN_KEYWORD;
	IN_MEASUREMENT => QUEX_TKN_KEYWORD;
	INDEX_DECR => QUEX_TKN_INDEXORDER;
	INDEX_INCR => QUEX_TKN_INDEXORDER;
	INTERN => QUEX_TKN_MEMATTRIBUTE;
	LINEAR => QUEX_TKN_CONVERSIONTYPE;
	LITTLE_ENDIAN => QUEX_TKN_BYTEORDER;
	LOC_MEASUREMENT => QUEX_TKN_KEYWORD;
	LONG => QUEX_TKN_DATASIZE;
	MAP => QUEX_TKN_TYPE;
	MAX_REFRESH => QUEX_TKN_KEYWORD;
	MEASUREMENT => QUEX_TKN_KEYWORD;
	MEMORY_LAYOUT => QUEX_TKN_KEYWORD;
	MEMORY_SEGMENT => QUEX_TKN_KEYWORD;
	MOD_COMMON => QUEX_TKN_KEYWORD;
	MOD_PAR => QUEX_TKN_KEYWORD;
	MODULE => QUEX_TKN_KEYWORD;
	MSB_FIRST => QUEX_TKN_BYTEORDER;
	MSB_LAST => QUEX_TKN_BYTEORDER;
	NO_AXIS_PTS_X => QUEX_TKN_KEYWORD;
	NO_AXIS_PTS_Y => QUEX_TKN_KEYWORD;
	NUMBER => QUEX_TKN_KEYWORD;
	OFFLINE_DATA => QUEX_TKN_PRGTYPE;
	OUT_MEASUREMENT => QUEX_TKN_KEYWORD;
	PBYTE => QUEX_TKN_ADDRTYPE;
	PHONE_NO => QUEX_TKN_KEYWORD;
	PLONG => QUEX_TKN_ADDRTYPE;
	PRG_CODE => QUEX_TKN_PRGTYPE;
	PRG_DATA => QUEX_TKN_PRGTYPE;
	PRG_RESERVED => QUEX_TKN_PRGTYPE;
	PROJECT => QUEX_TKN_KEYWORD;
	PROJECT_NO => QUEX_TKN_KEYWORD;
	PWORD => QUEX_TKN_ADDRTYPE;
	RAM => QUEX_TKN_MEMORYTYPE;
	RAT_FUNC => QUEX_TKN_CONVERSIONTYPE;
	READ_ONLY => QUEX_TKN_KEYWORD;
	RECORD_LAYOUT => QUEX_TKN_KEYWORD;
	REF_CHARACTERISTIC => QUEX_TKN_KEYWORD;
	REF_UNIT => QUEX_TKN_KEYWORD;
	REFERENCE => QUEX_TKN_MODE;
	REGISTER => QUEX_TKN_MEMORYTYPE;
	RES_AXIS => QUEX_TKN_ATTRIBUTE;
	RESERVED => QUEX_TKN_PRGTYPE;
	ROM => QUEX_TKN_MEMORYTYPE;
	ROW_DIR => QUEX_TKN_INDEXMODE;
	S_REC_LAYOUT => QUEX_TKN_KEYWORD;
	SBYTE => QUEX_TKN_DATATYPE;
	SERAM => QUEX_TKN_PRGTYPE;
	SLONG => QUEX_TKN_DATATYPE;
	SRC_ADDR_X => QUEX_TKN_KEYWORD;
	SRC_ADDR_Y => QUEX_TKN_KEYWORD;
	STATUS_STRING_REF => QUEX_TKN_KEYWORD;
	STD_AXIS => QUEX_TKN_ATTRIBUTE;
	SUB_FUNCTION => QUEX_TKN_KEYWORD;
	SWORD => QUEX_TKN_DATATYPE;
	SYSTEM_CONSTANT => QUEX_TKN_KEYWORD;
	TAB_INTP => QUEX_TKN_CONVERSIONTYPE;
	TAB_NOINTP => QUEX_TKN_CONVERSIONTYPE;
	TAB_VERB => QUEX_TKN_CONVERSIONTYPE;
	UBYTE => QUEX_TKN_DATATYPE;
	ULONG => QUEX_TKN_DATATYPE;
	USER => QUEX_TKN_KEYWORD;
	UWORD => QUEX_TKN_DATATYPE;
	VAL_BLK => QUEX_TKN_TYPE;
	VALUE => QUEX_TKN_TYPE;
	VARIABLES => QUEX_TKN_PRGTYPE;
	VERSION => QUEX_TKN_KEYWORD;
	WORD => QUEX_TKN_DATASIZE;

	<<EOF>>     => QUEX_TKN_TERMINATION;
	{D_WHITESPACE}  { }   
    	{D_SUB_IDENTIFIER}(\.{D_SUB_IDENTIFIER}*)* 	{ self_send1(QUEX_TKN_IDENTIFIER, Lexeme); RETURN; }
	[\+\-]?{D_UINTEGER} 						{ self_send1(QUEX_TKN_INTEGER, Lexeme); RETURN; }
	{D_FLOAT}([eE][\+\-]?{D_UINTEGER})?     		{ self_send1(QUEX_TKN_FLOAT, Lexeme); RETURN; }
	{D_COMMENT}				 			{ self_send1(QUEX_TKN_COMMENT, Lexeme); RETURN; }
	"\"%"{D_UINTEGER}\.{D_UINTEGER}"\"%"			{ self_send1(QUEX_TKN_STRINGFORMAT, Lexeme); RETURN; }
	{D_STRING}           						{ self_send1(QUEX_TKN_STRING, Lexeme); RETURN; }
	{D_BLOCK_BEGIN} 						{ self_send1(QUEX_TKN_BLOCKBEGIN, Lexeme); RETURN; }
	{D_BLOCK_END} 							{ self_send1(QUEX_TKN_BLOCKEND, Lexeme); RETURN; }
	{D_HEX} 								{ self_send1(QUEX_TKN_HEX, Lexeme); RETURN; }
       
}
